######################################################################
# you should not have to modify below.
#
#
# can add to libs:: all:: and LIBS

ifndef LIB
$(error LIB is not set in the calling Makefile)
endif

OBJS := $(SRC:.c=.o)
OBJS := $(OBJS:.S=.o)


# export all of the makefile variables.
export TTYUSB 
export BOOTLOADER
export GREP_STR 

MAKEFLAGS += --no-print-directory

TEST_PROGS := $(patsubst %.c, %.bin, $(TEST_SRC))

# if CHECK is defined, do that, otherwise if RUN is defined do that.
ifeq ($(CHECK),1)
CHECK_RUN := check
else ifeq ($(RUN),1)
TEST_RUN   := $(patsubst %.c, %.run, $(TEST_SRC))
endif
TEST_OBJS   := $(patsubst %.c, %.o, $(TEST_SRC))

# enable "make emit"
ifdef STAFF
ENABLE_EMIT :=1
endif

dep := $(TEST_SRC:.c=.d) $(OBJS:.o=.d) 
TEST_OBJS = $(TEST_SRC:.c=.o)

VPATH := $(sort $(dir $(dep)))

.SUFFIXES: .run

DEFS = $(CS49N_2021_PATH)/libpi/defs.mk
include $(DEFS)
CFLAGS += -Wno-unused-function -Wno-unused-variable  $(EXTRA_CFLAGS)

ifndef MK_CHK
    MK_CHK := $(LPP)/mk/Makefile.check
endif

# add the memmap file and the Makefiles as dependencies
#   - libpi serves as a sentinal covering everything in libpi
#     keep any DEPS that the client defined.
DEPS += $(MEMMAP) ./Makefile $(LPP)/mk/Makefile.lib.template $(DEFS)

# if we are building libpi.a don't add it as a dependency!
ifneq ($(LIB),libpi.a)
LINK_DEPS += $(LPI)
# put lib first so we take symbols from there.
# had a very weird error where a foo.o was appearing in libpi.  wth.
LIBS += $(LIB) $(LPI) 
else
LIBS = $(LPI) 
endif

ALL_OBJS := $(OBJS) $(STAFF_OBJS) 

all:: libs $(LIB) $(TEST_PROGS) $(TEST_RUN) $(CHECK_RUN) 

ech:
	@echo "VPATH=$(VPATH)"
	@echo "DEPS=$(DEPS)"
	@echo "SRC=$(SRC)"

$(LPI):
	@make -s -C $(LPP)

# double colon is so user can add transparently.
#
# if we are building libpi.a don't rerun make
libs::
ifneq ($(LIB),libpi.a)
	@make -s -C $(LPP)
endif

# $(OBJS): $(DEPS)

%.o: %.c $(DEPS)
	$(CC) $(CFLAGS) -c $< -o $@
%.o: %.S $(DEPS)
	$(CC) -c $(CPP_ASFLAGS) $< -o $@

# we delete the archive before creating so that the hack of
# having duplicate symbols in it resolved in order works.
# otherwise it *appears* we need to use the 
# put-your-src-here.mk hack.
$(LIB): $(ALL_OBJS) $(DEPS) $(LINK_DEPS)
	@rm -f $@
	$(AR) crf $@ $(ALL_OBJS)
	$(OD) -D $@ > $@.list

%.elf: %.o $(LIBS) $(DEPS) $(START)  $(LINK_DEPS)
	$(LD) $(START)  $< -T $(MEMMAP) -o $@  $(LIBS)



%.d: %.c $(DEPS)
	$(CC) $(CFLAGS) $< -MM -MT $(@:.d=.o) >$@
%.list: %.elf
	$(OD) -D   $*.elf > $*.list
%.bin: %.list
	$(OCP) $*.elf -O binary $*.bin
%.run: %.bin
	$(BOOTLOADER) $(TTYUSB) ./$<


# does it matter where we put this?
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),cleanall)
-include $(dep)  # include dep files
endif
endif

ifdef ENABLE_EMIT
emit: libs $(DEPS) $(TEST_PROGS)
	@make -e -f $(MK_CHK) emit "TESTS=$(TEST_PROGS)"
else
emit: 
	$( error "do not run emit!" )
endif

run: libs $(DEPS) $(TEST_PROGS)
	@make -f $(MK_CHK) run "TESTS=$(TEST_PROGS)"
check: libs $(DEPS) $(TEST_PROGS)
	@make -f $(MK_CHK) check "TESTS=$(TEST_PROGS)"

tags: 
	ctags *.[chSs] $(LPP)/*.[Ssch] $(LPP)/*/*.[chSs]

# note: double :: is so user can add transparently
clean::
	rm -rf $(LIB) *~ tags $(OBJS) *.bin *.elf *.list *.img Makefile.bak  *.d  $(TEST_OBJS)  $(dep)

.PHONY: libs all tags clean run update check update

# stop make from deleting these suffix'd files.
.PRECIOUS: %.list %.elf %.o %.d
